{
  "version": 3,
  "sources": ["../../../src/trigger/task/schedule-tasks/daily-cleanup.ts"],
  "sourcesContent": ["import { logger, schedules } from '@trigger.dev/sdk/v3';\r\nimport { cleanupExpiredSessions, cleanupOldLogs, cleanupTempFiles } from '../../utils/cleanup';\r\n\r\nexport const dailyCleanupTask = schedules.task({\r\n  id: 'daily-cleanup',\r\n  cron: '0 2 * * *', // Daily at 2 AM\r\n\r\n  run: async (payload, { ctx }) => {\r\n    logger.info('Starting daily cleanup');\r\n\r\n    try {\r\n      // Clean up old logs\r\n      const logCleanupResult = await cleanupOldLogs();\r\n\r\n      // Clean up temporary files\r\n      const fileCleanupResult = await cleanupTempFiles();\r\n\r\n      // Clean up expired sessions\r\n      const sessionCleanupResult = await cleanupExpiredSessions();\r\n\r\n      logger.info('Daily cleanup completed', {\r\n        logsRemoved: logCleanupResult.count,\r\n        filesRemoved: fileCleanupResult.count,\r\n        sessionsRemoved: sessionCleanupResult.count\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        cleanupResults: {\r\n          logs: logCleanupResult,\r\n          files: fileCleanupResult,\r\n          sessions: sessionCleanupResult\r\n        }\r\n      };\r\n    } catch (error) {\r\n      logger.error('Daily cleanup failed', {\r\n        error: (error as Error).message\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAGO,IAAM,mBAAmB,kBAAU,KAAK;AAAA,EAC7C,IAAI;AAAA,EACJ,MAAM;AAAA;AAAA,EAEN,KAAK,OAAO,SAAS,EAAE,IAAI,MAAM;AAC/B,WAAO,KAAK,wBAAwB;AAEpC,QAAI;AAEF,YAAM,mBAAmB,MAAM,eAAe;AAG9C,YAAM,oBAAoB,MAAM,iBAAiB;AAGjD,YAAM,uBAAuB,MAAM,uBAAuB;AAE1D,aAAO,KAAK,2BAA2B;AAAA,QACrC,aAAa,iBAAiB;AAAA,QAC9B,cAAc,kBAAkB;AAAA,QAChC,iBAAiB,qBAAqB;AAAA,MACxC,CAAC;AAED,aAAO;AAAA,QACL,SAAS;AAAA,QACT,gBAAgB;AAAA,UACd,MAAM;AAAA,UACN,OAAO;AAAA,UACP,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO,MAAM,wBAAwB;AAAA,QACnC,OAAQ,MAAgB;AAAA,MAC1B,CAAC;AAED,YAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;",
  "names": []
}
