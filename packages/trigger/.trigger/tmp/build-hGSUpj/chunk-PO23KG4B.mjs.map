{
  "version": 3,
  "sources": ["../../../src/trigger/task/email-tasks/welcome-email.ts"],
  "sourcesContent": ["// app/trigger/tasks/email/welcome-email.ts\r\nimport { logger, task } from '@trigger.dev/sdk/v3';\r\nimport { WelcomeEmailPayload } from '../../utils/types';\r\nimport { prepareWelcomeEmail, sendEmail } from '../../utils/email';\r\n\r\nexport const welcomeEmailTask = task({\r\n  id: 'welcome-email',\r\n  maxDuration: 300, // 5 minutes\r\n  retry: {\r\n    maxAttempts: 3,\r\n    minTimeoutInMs: 1000,\r\n    maxTimeoutInMs: 10000,\r\n    factor: 2,\r\n    randomize: true\r\n  },\r\n\r\n  run: async (payload: WelcomeEmailPayload, { ctx }) => {\r\n    const { userId, email, name } = payload;\r\n\r\n    try {\r\n      // Step 1: Validate input\r\n      if (!email || !name) {\r\n        throw new Error('Missing required fields: email or name');\r\n      }\r\n\r\n      // Step 2: Prepare email content\r\n      const emailContent = await prepareWelcomeEmail(name);\r\n\r\n      // Step 3: Send email\r\n      const result: { messageId: string } = await sendEmail(\r\n        email,\r\n        'Welcome to our platform!',\r\n        emailContent\r\n      );\r\n\r\n      // Step 4: Log success\r\n      logger.log('Welcome email sent successfully', {\r\n        userId,\r\n        email,\r\n        messageId: result.messageId\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        messageId: result.messageId,\r\n        sentAt: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      // Step 5: Handle errors\r\n      logger.error('Failed to send welcome email', {\r\n        userId,\r\n        email,\r\n        error: (error as Error).message,\r\n        stack: (error as Error).stack\r\n      });\r\n\r\n      throw error; // Re-throw for retry mechanism\r\n    }\r\n  }\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;AAAA;AAKO,IAAM,mBAAmB,KAAK;AAAA,EACnC,IAAI;AAAA,EACJ,aAAa;AAAA;AAAA,EACb,OAAO;AAAA,IACL,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,WAAW;AAAA,EACb;AAAA,EAEA,KAAK,OAAO,SAA8B,EAAE,IAAI,MAAM;AACpD,UAAM,EAAE,QAAQ,OAAO,KAAK,IAAI;AAEhC,QAAI;AAEF,UAAI,CAAC,SAAS,CAAC,MAAM;AACnB,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AAGA,YAAM,eAAe,MAAM,oBAAoB,IAAI;AAGnD,YAAM,SAAgC,MAAM;AAAA,QAC1C;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAGA,aAAO,IAAI,mCAAmC;AAAA,QAC5C;AAAA,QACA;AAAA,QACA,WAAW,OAAO;AAAA,MACpB,CAAC;AAED,aAAO;AAAA,QACL,SAAS;AAAA,QACT,WAAW,OAAO;AAAA,QAClB,SAAQ,oBAAI,KAAK,GAAE,YAAY;AAAA,MACjC;AAAA,IACF,SAAS,OAAO;AAEd,aAAO,MAAM,gCAAgC;AAAA,QAC3C;AAAA,QACA;AAAA,QACA,OAAQ,MAAgB;AAAA,QACxB,OAAQ,MAAgB;AAAA,MAC1B,CAAC;AAED,YAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;",
  "names": []
}
